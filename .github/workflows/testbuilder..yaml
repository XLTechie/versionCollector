name: Build release and publish addon

# Copyright (c) 2023, Luke Davis and Open Source Systems, Ltd..
# If you use this script, I would like to hear about it, just for fun and ego.
# Email at <XLTechie@newanswertech.com>.
# Released under the UNLICENSE. Find full terms at the end of the file.

env:
  publisher: Luke Davis (Open Source Systems)  # Will be used in Add-on store

on:
  push:
    tags: ["*"]
    # To build on main/master branch, uncomment the following lines:
#    branches:
#      - main
#      - master
#      - prime
  pull_request:
    branches:
      - main
      - master
      - prime
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
          cache: 'pip'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip wheel
          pip install -r requirements.txt
          sudo apt-get update  -y
          sudo apt-get install -y gettext
      - name: Code checks
        run: export SKIP=no-commit-to-branch; pre-commit run --all
      - name: building addon
        run: |
          scons
          scons pot
      - uses: actions/upload-artifact@v3
        with:
          name: packaged_addon
          path: |
            ./*.nvda-addon
            ./*.pot

  release_and_publish:
    permissions: write-all
    runs-on: windows-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    needs: ["build"]
    env:
      gh_user_secret: ${{ secrets.PUBLISHER_GITHUB_USER }}
      gh_password_secret: ${{ secrets.PUBLISHER_GITHUB_PASSWORD }}
    steps:
      - uses: actions/checkout@v3
      - name: download release files
        uses: actions/download-artifact@v3
      - name: Release
        id: release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            packaged_addon/*.nvda-addon
            packaged_addon/*.pot
          fail_on_unmatched_files: true
          prerelease: ${{ contains(github.ref, '-') }}
      #- name: output all step outputs
        #shell: pwsh
        #run: Write-Output "${{ join(steps.release.outputs.*, '\n') }}
      - name: Read variables from buildVars.py
        id: readManifest
        # This script concatenates the buildVars.py file, with some
        # other Python code, and pipes that to python in order to
        # print needed variables. Then bash redirects that output into
        # GitHub's persistent variables file for this workflow.
        # It includes logic to set the publish channel based upon the
        # addon_info["addon_updateChannel"] buildVars variable, which
        # not all add-ons have set. Set it if you don't.
        # It is also used by Add-on Updater, and is usually set to
        # None for stable channel, "dev" for dev channel, and doesn't
        # usually support a "beta" channel, though it does in this
        # context. TBD whether this confuses Add-on Updater.
        shell: bash
        run: |
          { cat ./buildVars.py
          cat <<"EOF"
          print(f'buildVars_summary={addon_info["addon_summary"]}')
          print(f'buildVars_version={addon_info["addon_version"]}')
          if addon_info["addon_updateChannel"] is None: addon_info["addon_updateChannel"] = "stable"
          print(f'buildVars_channel={addon_info["addon_updateChannel"]}')
          EOF
          } | python >> $GITHUB_ENV
      - name: Assign release asset URL to a saved variable
        env:
          asset_url: ${{ fromJSON(steps.release.outputs.assets)[0].browser_download_url }}
        shell: bash
        run: echo "release_asset_url=$asset_url" >> $GITHUB_ENV
      - name: Load dependencies
        shell: cmd
        run: |
          pip install selenium
          pip install webdriver-manager
      - name: Publish
        # Don't publish if the tag suggests a dev release, but buildVars indicate stable.
        if: |
          ${{
          ( contains(github.ref, '-') && env.buildVars_channel != 'stable' )
          || ( !contains(github.ref, '-') && env.buildVars_channel == 'stable' )
          }}
        shell: python
        run: |
          """This code makes some assumptions. It requires adjustment if any condition is not going to be met!
          * You have set your GitHub username as a secret variable in GitHub called PUBLISHER_GITHUB_USER.
          * You have set your GitHub password as a secret variable in GitHub called PUBLISHER_GITHUB_PASSWORD.
          (I don't like this requirement, but the process must be done through a logged in web session.)
          * This action is called after a release, either in the same job or its own job.
          * The runner variables are the same as they were for the release (so best called in the same workflow).
          * It's running as part of a tag push.
          * Uses variables derived from buildVars.py, set in a previous included step.
          =====
          Check the variables directly below this comment block.
          They may work out of the box, as they try to derive from buildVars.
          * The submissionTitle is the issue "Title" field, so enter it as you would there.
          """
          from os import environ
          submissionTitle = f'{environ["buildVars_summary"]} {environ["buildVars_version"]}'
          publisher = environ["publisher"]
          channel = environ["buildVars_channel"]  # stable/beta/dev. Currently calculated from buildVars (see above).
          # Setup
          from selenium import webdriver
          from selenium.webdriver.common.by import By
          from selenium.webdriver.chrome.service import Service
          from webdriver_manager.chrome import ChromeDriverManager
          from selenium.webdriver.support.ui import Select
          from urllib.parse import quote
          repoBase = f"https://github.com/{environ['GITHUB_REPOSITORY']}"
          releaseURL = environ["release_asset_url"]
          # Sanity checks
          channel = "stable" if channel is None else channel
          assert repoBase.lower().startswith("https://")  # NV Access requirement
          assert releaseURL.lower().startswith("https://")  # NV Access requirement
          assert releaseURL.lower().endswith(".nvda-addon")  # NV Access requirement
          assert channel in ("stable", "beta", "dev")
          print(f'U len: {len(environ["gh_user_secret"])}\n')
          print(f'U-P len: {len(environ["gh_password_secret"])}\n')
          print(f'DlU: {releaseURL}\nSU: {repoBase}\n')
          print(f'C: {channel}\nT: {submissionTitle}\nP: {publisher}\n\n')
          print(f'First part of URL {"matches" if environ["release_asset_url"].startswith("https://github.com/XLT") else "fails to match"}')
